/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-02-16 01:37:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.community;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class communityWriteForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"resources/assets/css/main.css\" />\r\n");
      out.write("<script src=\"https://kit.fontawesome.com/5f6c379a3f.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\r\n");
      out.write("<!-- <script type=\"text/javascript\" src=\".js/jquery-3.1.0.min.js\" charset=\"utf-8\"></script> -->\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".map_wrap {position:relative;overflow:hidden;width:100%;height:350px;}\r\n");
      out.write(".radius_border{border:1px solid #919191;border-radius:5px;}     \r\n");
      out.write(".custom_typecontrol {position:absolute;top:10px;right:10px;overflow:hidden;width:130px;height:30px;margin:0;padding:0;z-index:1;font-size:12px;font-family:'Malgun Gothic', '맑은 고딕', sans-serif; text-align:center; cursor:pointer;}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<body class=\"is-preload\">\r\n");
      out.write("\t<!-- Wrapper -->\r\n");
      out.write("\t<div id=\"wrapper\" class=\"fade-in\">\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- 헤더 -->\r\n");
      out.write("\t\t<header id=\"header\">\r\n");
      out.write("\t\t\t<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/\" class=\"logo\">맛.ZIP</a>\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- 상단 바 -->\r\n");
      out.write("\t\t<nav id=\"nav\">\r\n");
      out.write("\t\t\t<ul class=\"links\">\t\t\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/\">메인페이지</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/storemain\">맛집</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/community\">커뮤니티</a></li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t\t<nav id=\"nav1\">\r\n");
      out.write("\t\t\t<ul class=\"links\">\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/myPage\">마이페이지</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/logout\">로그아웃</a></li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"main\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t<form name=\"agent_form\"  method=\"POST\" enctype=\"multipart/form-data\">\r\n");
      out.write("\t<fieldset style=\"margin-left: 100px;\">\r\n");
      out.write("\t사진을 등록해주세요.<br>\r\n");
      out.write("\t\t<input type=\"file\" name=\"file\" id=\"uploadImg\" required>\r\n");
      out.write("\t\t<span id=\"preview\"></span>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"userid\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userid }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\t<!-- 차후에 세션으로 받아오기 -->\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"username\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.username }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\t\t<!-- 차후에 세션으로 받아오기 -->\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t제목 <input type=\"text\" name=\"title\">\t<br>\r\n");
      out.write("\t\t가게검색(이름 / 주소)  <input type=\"text\" name=\"restaurant\" id=\"restaurant\" required>\r\n");
      out.write("\t\t<input type=\"button\" onclick=\"ok()\" value=\"검색\"><br>\r\n");
      out.write("\t\t\t \t<div class=\"map_wrap\" >\r\n");
      out.write("\t<div id=\"map\" style=\"width:400px; height:400px; float:left; border:2px solid grey; position:relative; overflow:hidden;\"></div>\r\n");
      out.write("<!-- \t\t<div class=\"custom_typecontrol radius_border\" onclick=\"Pcode()\"> -->\r\n");
      out.write("<!-- \t\t\t주소로 위치 설정 -->\r\n");
      out.write("<!-- \t\t</div> -->\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"address\" id=\"address\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\t내용<textarea rows=\"30\" cols=\"30\" name=\"context\"></textarea>\t\t\r\n");
      out.write("\t\t<input type=\"submit\" value=\"리뷰 작성\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"메인으로\" height=\"40px\" width=\"40px\"\r\n");
      out.write("\t\tonclick=\"location.replace('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("')\">\t\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("\t\t\t<!-- \t\t\t\t맵 프로토타입2\t\t\t\t\t\t\t\t-->\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t<script src=\"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0ec2b54c04ec761a948b34fefea022c0&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("// 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\r\n");
      out.write("var infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("// 지도를 생성합니다    \r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("// 장소 검색 객체를 생성합니다\r\n");
      out.write("var ps = new kakao.maps.services.Places(); \r\n");
      out.write(" function ok(){\r\n");
      out.write("     map = new kakao.maps.Map(mapContainer, mapOption);    \r\n");
      out.write("     var test = document.getElementById('restaurant').value;   \r\n");
      out.write("// 키워드로 장소를 검색합니다\r\n");
      out.write("ps.keywordSearch(test, placesSearchCB); \r\n");
      out.write("    }\r\n");
      out.write("// 키워드 검색 완료 시 호출되는 콜백함수 입니다\r\n");
      out.write("function placesSearchCB (data, status, pagination) {\r\n");
      out.write("    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("        var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("\r\n");
      out.write("        for (var i=0; i<data.length; i++) {\r\n");
      out.write("            displayMarker(data[i]);    \r\n");
      out.write("            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n");
      out.write("        }       \r\n");
      out.write("\r\n");
      out.write("        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("        map.setBounds(bounds);\r\n");
      out.write("    } \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 지도에 마커를 표시하는 함수입니다\r\n");
      out.write("function displayMarker(place) {\r\n");
      out.write("    \r\n");
      out.write("    // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("        map: map,\r\n");
      out.write("        position: new kakao.maps.LatLng(place.y, place.x) \r\n");
      out.write("    });\r\n");
      out.write("   var xy =new kakao.maps.LatLng(place.y, place.x);\r\n");
      out.write("    // 마커에 클릭이벤트를 등록합니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("       searchDetailAddrFromCoords(xy, function(result, status) {\r\n");
      out.write("        if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("          var test2 = document.getElementById('address');\r\n");
      out.write("          var test3 = document.getElementById('restaurant');\r\n");
      out.write("            var detailAddr = result[0].address.address_name;\r\n");
      out.write("            test2.value = detailAddr;\r\n");
      out.write("            test3.value = place.place_name;\r\n");
      out.write("            infowindow.setContent(place.place_name + '<br>' + detailAddr );\r\n");
      out.write("            infowindow.open(map, marker);\r\n");
      out.write("        }   \r\n");
      out.write("    });\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("function searchDetailAddrFromCoords(coords, callback) {\r\n");
      out.write("    // 좌표로 법정동 상세 주소 정보를 요청합니다\r\n");
      out.write("    geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\t<a href=\"searchmap\" style=\"text-decoration: none\">지도가 보이지 않습니다.</a>\r\n");
      out.write("\r\n");
      out.write("<!--  \t\t\tmap 프로토타입 끝\t\t-->\t\t\t\t\r\n");
      out.write("\t<input type=\"button\" value=\"메인으로\" onclick=\"location.replace('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("')\">\r\n");
      out.write("</form>\r\n");
      out.write("\t<input id=\"user\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userid }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("<script src=\"resources/assets/js/jquery.min.js?ver=2\"></script>\r\n");
      out.write("\t\t<script src=\"resources/assets/js/jquery.scrollex.min.js?ver=3\"></script>\r\n");
      out.write("\t\t<script src=\"resources/assets/js/jquery.scrolly.min.js?ver=4\"></script>\r\n");
      out.write("\t\t<script src=\"resources/assets/js/browser.min.js?ver=5\"></script>\r\n");
      out.write("\t\t<script src=\"resources/assets/js/breakpoints.min.js?ver=6\"></script>\r\n");
      out.write("\t\t<script src=\"resources/assets/js/util.js?ver=7\"></script>\r\n");
      out.write("\t\t<script src=\"resources/assets/js/main.js?ver=8\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("var upload = document.querySelector('#uploadImg');\r\n");
      out.write("var preview = document.querySelector('#preview');\r\n");
      out.write("\r\n");
      out.write("// NodeList nodeList = preview.getChildsNodes();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("upload.addEventListener('change',function (e) {\r\n");
      out.write("    var get_file = e.target.files;\r\n");
      out.write("    var image = document.createElement('img');\r\n");
      out.write("    \r\n");
      out.write("    /* FileReader 객체 생성 */\r\n");
      out.write("    var reader = new FileReader();\r\n");
      out.write("\r\n");
      out.write("    /* reader 시작시 함수 구현 */\r\n");
      out.write("    reader.onload = (function (aImg) {\r\n");
      out.write("        console.log(1);\r\n");
      out.write("\r\n");
      out.write("        return function (e) {\r\n");
      out.write("            console.log(3);\r\n");
      out.write("            /* base64 인코딩 된 스트링 데이터 */         \r\n");
      out.write("            aImg.src = e.target.result;\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("    })(image)\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    if(get_file){\r\n");
      out.write("        /* \r\n");
      out.write("            get_file[0] 을 읽어서 read 행위가 종료되면 loadend 이벤트가 트리거 되고 \r\n");
      out.write("            onload 에 설정했던 return 으로 넘어간다.\r\n");
      out.write("            이와 함게 base64 인코딩 된 스트링 데이터가 result 속성에 담겨진다.\r\n");
      out.write("        */  \r\n");
      out.write("       \r\n");
      out.write("        \treader.readAsDataURL(get_file[0]);\r\n");
      out.write("        \tconsole.log(2);\r\n");
      out.write("    }\r\n");
      out.write("    if(preview.hasChildNodes()){\r\n");
      out.write("    \tpreview.replaceChild(image, preview.firstChild);\r\n");
      out.write("    \tpreview.appendChild(image);\r\n");
      out.write("    \tconsole.log(\"if 만족 실행\")\r\n");
      out.write("    }else{\r\n");
      out.write("    \tpreview.appendChild(image);\r\n");
      out.write("    \tconsole.log(\"else 실행\")\r\n");
      out.write("    }\r\n");
      out.write("//     preview.replaceChile(nodeList[0], image);\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
